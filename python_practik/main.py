# Лабораторная работа № 1
# РАБОТА В IDLE. ИСПОЛЬЗОВАНИЕ
# АРИФМЕТИЧЕСКИХ ОПЕРАЦИЙ. СОЗДАНИЕ СПИСКОВ
# И СЛОВАРЕЙ. РАБОТА С ЦИКЛАМ

# Цель работы: научиться использовать IDLE при работе с
# Python; изучить списки и словари, освоить основные методы
# для работы с ними; изучить виды циклов в Python.

# 1. Написать функцию, которая принимает целочисленный
# список с количеством элементов 1 или более и возвращает
# True, если цифра 6 является первым или последним элементом
# списка.


# def checkingForTheNumberSix(mass):
#     if mass[0] == 6 or mass[-1] == 6:
#         return True
#     return False
#
# print(checkingForTheNumberSix([4, 1, 1]))


# Лабораторная работа №2
# РАБОТА С ОСНОВНЫМИ ВСТРОЕННЫМИ
# ФУНКЦИЯМИ

# Цель работы: рассмотреть основные встроенные функции
# языка программирования Python и научиться с ними работать.

# 1. Написать функцию, которая принимает целое число и
# возвращает сгенерированный список, содержащий количество
# элементов от 0 до входящего числа включительно.

# import random
#
# def listGenerator(n):
#     return [random.randint(0, n) for _ in range(n + 1)]
#
# print(listGenerator(6))


# Лабораторная работа №3
# РАБОТА С ИТЕРАТОРАМИ, ГЕНЕРАТОРАМИ.
# РАБОТА С ГЕНЕРАТОРНЫМИ ВЫРАЖЕНИЯМИ
# Цель работы: изучить понятия итератора и генератора в
# Python, а также их преимущества; ознакомиться с примерами
# их пользования.


# 1. Написать функцию, которая принимает целое число и с
# помощью генераторного выражения создает и возвращает но-
# вый список случайных чисел с длиной входящего числа.

# import random
#
# def generate_random_list_with_length(n):
#     return [random.randint(0, 100) for _ in range(n)]
#
# print(generate_random_list_with_length(5))


# Лабораторная работа №4
# РАБОТА С ОСНОВНЫМИ МОДУЛЯМИ
# Цель работы: изучить основные модули стандартной биб-
# лиотеки Python 3; рассмотреть модули os и datetime.

# 1. Написать функцию, которая принимает объект datetime
# и возвращает True, если год полученного значения високосный.

# import datetime
#
# def is_leap_year(date):
#     year = date.year
#     return (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0)
#
# date = datetime.datetime(2024, 1, 1)
# print(is_leap_year(date))  # True
#
# date = datetime.datetime(2023, 1, 1)
# print(is_leap_year(date))  # False


# Лабораторная работа №5
# РАБОТА С ФАЙЛАМИ. РАЗРАБОТКА
# СИНТАКСИЧЕСКОГО АНАЛИЗАТОРА. ВЫВОД
# ФОРМАТИРОВАННЫХ ДАННЫХ В ФОРМАТЕ JSON
# Цель работы: изучить работу с файлами с помощью
# функций из стандартной библиотеки; рассмотреть понятие син-
# таксического анализа текста и ознакомиться с его применением
# на языке Python; изучить возможности взаимодействия Python с
# форматом хранения данных JSON.

# 1. Написать функцию, которая принимает Json строку и
# конвертирует её в словарь.

# import json
#
# def json_to_dict(json_string):
#     return json.loads(json_string)
#
#
# json_string = '{"name": "John", "age": 30, "city": "New York"}'
# dictionary = json_to_dict(json_string)
# print(dictionary)


# Лабораторная работа №6
# РАЗРАБОТКА ПРИЛОЖЕНИЯ РАБОТЫ С БАЗОЙ
# ДАННЫХ
# Цель работы: изучить возможности взаимодействия Py-
# thon с реляционными базами данных с помощью DB-API 2.0.

# 1. Написать функцию, которая принимает наименование
# таблицы, поля и его значение и возвращает идентификатор за-
# писи, в которой значение полученного поля соответствует пе-
# реданному функции, или возвращает None

import sqlite3

def find_record_id_by_field(table_name, field_name, field_value):
    # Подключаемся к базе данных
    conn = sqlite3.connect('db_lab6.db')  # Здесь  база данных
    cursor = conn.cursor()

    # Формируем SQL-запрос
    query = f"SELECT id FROM {table_name} WHERE {field_name} = ?"

    # Выполняем запрос с параметром
    cursor.execute(query, (field_value,))

    # Получаем результат
    result = cursor.fetchone()

    # Закрываем соединение с базой данных
    conn.close()

    # Возвращаем идентификатор записи или None
    if result:
        return result[0]  # Первый элемент - это ID записи
    else:
        return None

record_id = find_record_id_by_field('users', 'email', 'example@example.com') #(1, 'John Doe', 'john@example.com')(2, 'Jane Smith', 'jane@example.com')(3, 'Alice Johnson', 'alice@example.com')
if record_id:
    print(f"ID записи: {record_id}")
else:
    print("Запись не найдена.")


